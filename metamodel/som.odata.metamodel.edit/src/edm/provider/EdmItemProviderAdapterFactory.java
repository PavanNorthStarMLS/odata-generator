/**
 */
package edm.provider;

import edm.util.EdmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EdmItemProviderAdapterFactory extends EdmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EdmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODServiceItemProvider odServiceItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODServiceAdapter() {
		if (odServiceItemProvider == null) {
			odServiceItemProvider = new ODServiceItemProvider(this);
		}

		return odServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODSchema} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODSchemaItemProvider odSchemaItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODSchema}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODSchemaAdapter() {
		if (odSchemaItemProvider == null) {
			odSchemaItemProvider = new ODSchemaItemProvider(this);
		}

		return odSchemaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODEntityContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODEntityContainerItemProvider odEntityContainerItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODEntityContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODEntityContainerAdapter() {
		if (odEntityContainerItemProvider == null) {
			odEntityContainerItemProvider = new ODEntityContainerItemProvider(this);
		}

		return odEntityContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODNamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODNamedElementItemProvider odNamedElementItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODNamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODNamedElementAdapter() {
		if (odNamedElementItemProvider == null) {
			odNamedElementItemProvider = new ODNamedElementItemProvider(this);
		}

		return odNamedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODTypeItemProvider odTypeItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODTypeAdapter() {
		if (odTypeItemProvider == null) {
			odTypeItemProvider = new ODTypeItemProvider(this);
		}

		return odTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODAnnotable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODAnnotableItemProvider odAnnotableItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODAnnotable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODAnnotableAdapter() {
		if (odAnnotableItemProvider == null) {
			odAnnotableItemProvider = new ODAnnotableItemProvider(this);
		}

		return odAnnotableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODStructuralType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODStructuralTypeItemProvider odStructuralTypeItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODStructuralType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODStructuralTypeAdapter() {
		if (odStructuralTypeItemProvider == null) {
			odStructuralTypeItemProvider = new ODStructuralTypeItemProvider(this);
		}

		return odStructuralTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODEntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODEntityTypeItemProvider odEntityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODEntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODEntityTypeAdapter() {
		if (odEntityTypeItemProvider == null) {
			odEntityTypeItemProvider = new ODEntityTypeItemProvider(this);
		}

		return odEntityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODComplexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODComplexTypeItemProvider odComplexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODComplexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODComplexTypeAdapter() {
		if (odComplexTypeItemProvider == null) {
			odComplexTypeItemProvider = new ODComplexTypeItemProvider(this);
		}

		return odComplexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODPrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODPrimitiveTypeItemProvider odPrimitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODPrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODPrimitiveTypeAdapter() {
		if (odPrimitiveTypeItemProvider == null) {
			odPrimitiveTypeItemProvider = new ODPrimitiveTypeItemProvider(this);
		}

		return odPrimitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODEnumType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODEnumTypeItemProvider odEnumTypeItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODEnumType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODEnumTypeAdapter() {
		if (odEnumTypeItemProvider == null) {
			odEnumTypeItemProvider = new ODEnumTypeItemProvider(this);
		}

		return odEnumTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODPropertyItemProvider odPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODPropertyAdapter() {
		if (odPropertyItemProvider == null) {
			odPropertyItemProvider = new ODPropertyItemProvider(this);
		}

		return odPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.TypedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedElementItemProvider typedElementItemProvider;

	/**
	 * This creates an adapter for a {@link edm.TypedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedElementAdapter() {
		if (typedElementItemProvider == null) {
			typedElementItemProvider = new TypedElementItemProvider(this);
		}

		return typedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODNavigationProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODNavigationPropertyItemProvider odNavigationPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODNavigationProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODNavigationPropertyAdapter() {
		if (odNavigationPropertyItemProvider == null) {
			odNavigationPropertyItemProvider = new ODNavigationPropertyItemProvider(this);
		}

		return odNavigationPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODElementItemProvider odElementItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODElementAdapter() {
		if (odElementItemProvider == null) {
			odElementItemProvider = new ODElementItemProvider(this);
		}

		return odElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODExposedEntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODExposedEntityTypeItemProvider odExposedEntityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODExposedEntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODExposedEntityTypeAdapter() {
		if (odExposedEntityTypeItemProvider == null) {
			odExposedEntityTypeItemProvider = new ODExposedEntityTypeItemProvider(this);
		}

		return odExposedEntityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODEntitySet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODEntitySetItemProvider odEntitySetItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODEntitySet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODEntitySetAdapter() {
		if (odEntitySetItemProvider == null) {
			odEntitySetItemProvider = new ODEntitySetItemProvider(this);
		}

		return odEntitySetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODSingleton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODSingletonItemProvider odSingletonItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODSingleton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODSingletonAdapter() {
		if (odSingletonItemProvider == null) {
			odSingletonItemProvider = new ODSingletonItemProvider(this);
		}

		return odSingletonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODNavigationPropertyBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODNavigationPropertyBindingItemProvider odNavigationPropertyBindingItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODNavigationPropertyBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODNavigationPropertyBindingAdapter() {
		if (odNavigationPropertyBindingItemProvider == null) {
			odNavigationPropertyBindingItemProvider = new ODNavigationPropertyBindingItemProvider(this);
		}

		return odNavigationPropertyBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODAnnotationItemProvider odAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODAnnotationAdapter() {
		if (odAnnotationItemProvider == null) {
			odAnnotationItemProvider = new ODAnnotationItemProvider(this);
		}

		return odAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODTerm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODTermItemProvider odTermItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODTerm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODTermAdapter() {
		if (odTermItemProvider == null) {
			odTermItemProvider = new ODTermItemProvider(this);
		}

		return odTermItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODTypeDefinitionItemProvider odTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODTypeDefinitionAdapter() {
		if (odTypeDefinitionItemProvider == null) {
			odTypeDefinitionItemProvider = new ODTypeDefinitionItemProvider(this);
		}

		return odTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODMember} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODMemberItemProvider odMemberItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODMember}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODMemberAdapter() {
		if (odMemberItemProvider == null) {
			odMemberItemProvider = new ODMemberItemProvider(this);
		}

		return odMemberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edm.ODPropertyKeyRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODPropertyKeyRefItemProvider odPropertyKeyRefItemProvider;

	/**
	 * This creates an adapter for a {@link edm.ODPropertyKeyRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODPropertyKeyRefAdapter() {
		if (odPropertyKeyRefItemProvider == null) {
			odPropertyKeyRefItemProvider = new ODPropertyKeyRefItemProvider(this);
		}

		return odPropertyKeyRefItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (odServiceItemProvider != null) odServiceItemProvider.dispose();
		if (odSchemaItemProvider != null) odSchemaItemProvider.dispose();
		if (odEntityContainerItemProvider != null) odEntityContainerItemProvider.dispose();
		if (odNamedElementItemProvider != null) odNamedElementItemProvider.dispose();
		if (odTypeItemProvider != null) odTypeItemProvider.dispose();
		if (odAnnotableItemProvider != null) odAnnotableItemProvider.dispose();
		if (odStructuralTypeItemProvider != null) odStructuralTypeItemProvider.dispose();
		if (odEntityTypeItemProvider != null) odEntityTypeItemProvider.dispose();
		if (odComplexTypeItemProvider != null) odComplexTypeItemProvider.dispose();
		if (odPrimitiveTypeItemProvider != null) odPrimitiveTypeItemProvider.dispose();
		if (odEnumTypeItemProvider != null) odEnumTypeItemProvider.dispose();
		if (odPropertyItemProvider != null) odPropertyItemProvider.dispose();
		if (typedElementItemProvider != null) typedElementItemProvider.dispose();
		if (odNavigationPropertyItemProvider != null) odNavigationPropertyItemProvider.dispose();
		if (odElementItemProvider != null) odElementItemProvider.dispose();
		if (odExposedEntityTypeItemProvider != null) odExposedEntityTypeItemProvider.dispose();
		if (odEntitySetItemProvider != null) odEntitySetItemProvider.dispose();
		if (odSingletonItemProvider != null) odSingletonItemProvider.dispose();
		if (odNavigationPropertyBindingItemProvider != null) odNavigationPropertyBindingItemProvider.dispose();
		if (odAnnotationItemProvider != null) odAnnotationItemProvider.dispose();
		if (odTermItemProvider != null) odTermItemProvider.dispose();
		if (odTypeDefinitionItemProvider != null) odTypeDefinitionItemProvider.dispose();
		if (odMemberItemProvider != null) odMemberItemProvider.dispose();
		if (odPropertyKeyRefItemProvider != null) odPropertyKeyRefItemProvider.dispose();
	}

}
