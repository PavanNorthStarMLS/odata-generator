[comment encoding = UTF-8 /]
[module generateMetadata('http://odata.org/edm/1.0.0')/]

[template public generateMetadata(anODService : ODService)]
	
	[comment @main /]
	[file ('metadata.xml', false, 'UTF-8')]
[for (schema : ODSchema | anODService.schemas)]
<edmx:Edmx xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" Version="4.0">
<edmx:DataServices>
<Schema xmlns="http://docs.oasis-open.org/odata/ns/edm" Namespace="[schema.namespace/]">
[for (entityType : ODEntityType | schema.entityTypes)]
[entityType.generateEntityType(schema)/]
[/for]
[for (complexType : ODComplexType | schema.complexTypes)]
[complexType.generateComplexType(schema)/]
[/for]
[for (enumType : ODEnumType | schema.enumTypes)]
[enumType.generateEnumType()/]
[/for]
<EntityContainer Name="[schema.entityContainer.name/]">
[for (entitySet : ODEntitySet | schema.entityContainer.entitySets)]
	<EntitySet Name="[entitySet.name/]" EntityType="[schema.namespace.concat('.').concat(entitySet.entityType.name)/]">
	[for (navigationPropertyBinding : ODNavigationPropertyBinding | entitySet.navigationPropertyBindings)]
		<NavigationPropertyBinding Path="[navigationPropertyBinding.path/]" Target="[navigationPropertyBinding.target/]"/>
	[/for]
	</EntitySet>
[/for]
[for (singleton : ODSingleton | schema.entityContainer.singletons)]
	<Singleton Name="[singleton.name/]" EntityType="[schema.namespace.concat('.').concat(singleton.entityType.name)/]">
	[for (navigationPropertyBinding : ODNavigationPropertyBinding | singleton.navigationPropertyBindings)]
		<NavigationPropertyBinding Path="[navigationPropertyBinding.path/]" Target="[navigationPropertyBinding.target/]"/>
	[/for]
	</Singleton>
[/for]
</EntityContainer>
</Schema>
</edmx:DataServices>
</edmx:Edmx>
[/for]		
	[/file]
	
[/template]

[template public generateEntityType (entityType : ODEntityType, schema: ODSchema) ]
<EntityType Name="[entityType.name/]" [if (entityType.abstract = true)]Abstract="true"[/if] [if(not entityType.baseType.oclIsUndefined())]BaseType="[schema.namespace.concat('.').concat(entityType.baseType.name)/]"[/if]>
[entityType.generateKey()/]
[for (property : ODProperty | entityType.properties)]
	[property.generateProperty(schema)/]
[/for]
[for (navigationProperty : ODNavigationProperty | entityType.navigationProperties)]
	[navigationProperty.generateNavigationProperty(schema)/][/for]
</EntityType>
[/template]

[template public generateComplexType (complexType : ODComplexType, schema: ODSchema) ]
<ComplexType Name="[complexType.name/]" [if (complexType.abstract = true)]Abstract="true"[/if] [if(not complexType.baseType.oclIsUndefined())]BaseType="[schema.namespace.concat('.').concat(complexType.baseType.name)/]"[/if]>
[for (property : ODProperty | complexType.properties)]
	[property.generateProperty(schema)/]
[/for]
[for (navigationProperty : ODNavigationProperty | complexType.navigationProperties)]
[navigationProperty.generateNavigationProperty(schema)/][/for]
</ComplexType>
[/template]

[template public generateEnumType (enumType : ODEnumType) ]
<EnumType Name="[enumType.name/]" [if (enumType.isFlags = true)]IsFlags="true"[/if] [if(not enumType.underlyingType.oclIsUndefined())]UnderlyingType="[enumType.underlyingType.name/]"[/if]>
[for (member : ODMember | enumType.Members)]
	<Member Name="[member.name/]" [if(not member.value.oclIsUndefined())]Value="[member.value/]"[/if] />
[/for]
[/template]
[template public generateNavigationProperty (navigationProperty : ODNavigationProperty, schema: ODSchema) ]
<NavigationProperty Name="[navigationProperty.name/]" Type="[if(navigationProperty.multivalued = true)]Collection([schema.namespace.concat('.').concat(navigationProperty.type.name)/])[else][schema.namespace.concat('.').concat(navigationProperty.type.name)/][/if]" [if(not navigationProperty.partner.oclIsUndefined())]Partner="[navigationProperty.partner.name/]"[/if] [if(not navigationProperty.nullable.oclIsUndefined())]Nullable="[navigationProperty.nullable/]"[/if]/>

[/template]

[template public generateProperty (property : ODProperty, schema: ODSchema) ]
<Property Name="[property.name/]" Type="[if(property.multivalued = true)]Collection([if(not property.type.oclIsKindOf(ODPrimitiveType))][schema.namespace.concat('.')/][/if][property.type.name/])[else][if(not property.type.oclIsKindOf(ODPrimitiveType))][schema.namespace.concat('.')/][/if][property.type.name/][/if]" [if(not property.nullable.oclIsUndefined())]Nullable="[property.nullable/]"[/if]/>
[/template]

[template public generateKey (entityType : ODEntityType) ]
<Key>
[for (key : ODPropertyKeyRef | entityType.key)]
	<PropertyRef Name="[key.property.name/]"/>
[/for]
</Key>
[/template]
