[comment encoding = UTF-8 /]
[module generateUtil('http://odata.org/edm/1.0.0')]
[import som::odata::generator::acceleo::helpers::helper /]

[template public generateUtil(anODService : ODService) {schema :ODSchema = anODService.schemas->first();} ]
[file ('src/main/java/odata/demo/util/Util.java', false, 'UTF-8')]
package odata.demo.util;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Locale;

import org.apache.olingo.commons.api.data.ComplexValue;
import org.apache.olingo.commons.api.data.Entity;
import org.apache.olingo.commons.api.data.EntityCollection;
import org.apache.olingo.commons.api.data.Property;
import org.apache.olingo.commons.api.data.ValueType;
import org.apache.olingo.commons.api.edm.EdmBindingTarget;
import org.apache.olingo.commons.api.edm.EdmEntitySet;
import org.apache.olingo.commons.api.edm.EdmEntityType;
import org.apache.olingo.commons.api.edm.EdmNavigationProperty;
import org.apache.olingo.commons.api.ex.ODataRuntimeException;
import org.apache.olingo.commons.api.http.HttpStatusCode;
import org.apache.olingo.server.api.ODataApplicationException;
import org.apache.olingo.server.api.ServiceMetadata;
import org.apache.olingo.server.api.uri.UriParameter;
import org.apache.olingo.server.api.uri.UriResource;
import org.apache.olingo.server.api.uri.UriResourceEntitySet;
import org.apache.olingo.server.api.uri.UriResourceNavigation;
import org.jooq.Record;
import org.jooq.Result;
import org.jooq.SelectQuery;
import org.jooq.impl.DSL;

import odata.demo.service.EdmProvider;
import odata.demo.service.Storage;

public class Util {

	public static SelectQuery<Record> buildQueryStep(SelectQuery<Record> query, UriResource segment1, UriResource segment2, ServiceMetadata metadata)
			throws ODataApplicationException {
		List<UriParameter> keyPredicates = null;
		EdmNavigationProperty navigationProperty = null;
		EdmEntitySet navigationTargetEntitySet = null;
		EdmEntitySet startEntitySet = null;
		if (segment1 instanceof UriResourceNavigation) {
			startEntitySet = getEnitySetFromEntityType(((UriResourceNavigation) segment1).getProperty().getType(), metadata);
		}
		if (segment1 instanceof UriResourceEntitySet) {
			startEntitySet = ((UriResourceEntitySet) segment1).getEntitySet();
			keyPredicates = ((UriResourceEntitySet) segment1).getKeyPredicates();
		}
		if (segment2 instanceof UriResourceNavigation) {
			navigationProperty = ((UriResourceNavigation) segment2).getProperty();
		}
		if (segment2 instanceof UriResourceEntitySet) {

		}

		String navPropName = navigationProperty.getName();
		EdmBindingTarget edmBindingTarget = startEntitySet.getRelatedBindingTarget(navPropName);
		if (edmBindingTarget == null) {
			throw new ODataApplicationException("Not supported.", HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(),
					Locale.ROOT);
		}

		if (edmBindingTarget instanceof EdmEntitySet) {
			navigationTargetEntitySet = (EdmEntitySet) edmBindingTarget;
		} else {
			throw new ODataApplicationException("Not supported.", HttpStatusCode.NOT_IMPLEMENTED.getStatusCode(),
					Locale.ROOT);
		}

[for (entitySet : ODEntitySet| schema.entityContainer.entitySets)]
[for(navigationPropertybinding : ODNavigationPropertyBinding | entitySet.navigationPropertyBindings)]
		if (EdmProvider.ES_[entitySet.name.toUpper()/]_NAME.equals(startEntitySet.getName())
				&& EdmProvider.ES_[navigationPropertybinding.target.toUpper()/]_NAME.equals(navigationTargetEntitySet.getName())
				&& navigationProperty.getName().equals("[navigationPropertybinding.path/]")) {
			[navigationPropertybinding.addJoin(entitySet, schema)/]
		}
[/for]
[/for]
		if (keyPredicates != null && !keyPredicates.isEmpty()) {
[for (entitySet : ODEntitySet| schema.entityContainer.entitySets)]
			[entitySet.addWhere()/]
[/for]
		}
		return query;
	}

	public static EdmEntitySet getEnitySetFromEntityType(EdmEntityType edmEntityType, ServiceMetadata metadata) {
[for (entitySet : ODEntitySet| schema.entityContainer.entitySets)]
		if (edmEntityType.getFullQualifiedName().equals(EdmProvider.ET_[entitySet.entityType.name.toUpper()/]_FQN))
			return metadata.getEdm().getEntityContainer().getEntitySet(EdmProvider.ES_[entitySet.name.toUpper()/]_NAME);
[/for]
		return null;

	}
	public static EntityCollection getEntityCollection(EdmEntitySet edmEntitySet, Result<Record> result, Storage storage) {
		EntityCollection collection = new EntityCollection();
		List<Entity> list = collection.getEntities();
		
[for (entitySet : ODEntitySet | schema.entityContainer.entitySets)]
		if (EdmProvider.ES_[entitySet.name.toUpper()/]_NAME.equals(edmEntitySet.getName())) {

			for (Record record : result) {
				Entity e = new Entity();
[for (property : ODProperty | entitySet.entityType.properties)]
[if(property.type.oclIsKindOf(ODPrimitiveType) and (property.multivalued.oclIsUndefined() or property.multivalued = false))]
				e.addProperty(new Property(null, "[property.name /]", ValueType.PRIMITIVE, record.get("[property.name.toLower() /]")));
[elseif (property.type.oclIsKindOf(ODComplexType) and (property.multivalued.oclIsUndefined() or property.multivalued = false) )]
				ComplexValue [property.name.toLower()/]Type = new ComplexValue();
				Record [property.name.toLower()/]Result = storage.getCreate().select().from("[property.type.name.toLower()/]").where(DSL.field("id").eq( record.get("[property.type.name.toLower()/]_id"))).fetch().get(0);
[for (c_property : ODProperty | property.type.oclAsType(ODComplexType).properties)]
				[property.name.toLower()/]Type.getValue().add(new Property(null, "[c_property.name/]", ValueType.PRIMITIVE, [property.name.toLower()/]Result.get("[c_property.name.toLower()/]")));
[/for]	
				e.addProperty(new Property(null, "[property.name/]", ValueType.COMPLEX, [property.name.toLower()/]Type));				
[/if]
[/for]
				e.setId(createId("[entitySet.name/]", record.get("[entitySet.entityType.key -> first().property.name.toLower()/]")));
				list.add(e);
			}

		}
[/for]
			return collection;
	}
	public static Entity getEntity(EdmEntityType edmEntityType, Record record, Storage storage) {
		
		Entity entity = new Entity();
[for (e : ODEntityType | schema.entityTypes)]
		if (EdmProvider.ET_[e.name.toUpper()/]_NAME.equals(edmEntityType.getName())) {
[for (property : ODProperty | e.properties)]
[if(property.type.oclIsKindOf(ODPrimitiveType) and (property.multivalued.oclIsUndefined() or property.multivalued = false))]
				entity.addProperty(new Property(null, "[property.name /]", ValueType.PRIMITIVE, record.get("[property.name.toLower() /]")));
[elseif (property.type.oclIsKindOf(ODComplexType) and (property.multivalued.oclIsUndefined() or property.multivalued = false) )]
				ComplexValue [property.name.toLower()/]Type = new ComplexValue();
				Record [property.name.toLower()/]Result = storage.getCreate().select().from("[property.type.name.toLower()/]").where(DSL.field("id").eq( record.get("[property.type.name.toLower()/]_id"))).fetch().get(0);
[for (c_property : ODProperty | property.type.oclAsType(ODComplexType).properties)]
				[property.name.toLower()/]Type.getValue().add(new Property(null, "[c_property.name/]", ValueType.PRIMITIVE, [property.name.toLower()/]Result.get("[c_property.name.toLower()/]")));
[/for]	
				entity.addProperty(new Property(null, "[property.name/]", ValueType.COMPLEX, [property.name.toLower()/]Type));				
[/if]
[/for]
				entity.setId(createId("[schema.entityContainer.entitySets -> select(entityType = e)-> first().name/]", record.get("[e.key -> first().property.name.toLower()/]")));
			}
[/for]		

			return entity;
	}
	public static URI createId(String entitySetName, Object id) {
		try {
			return new URI(entitySetName + "(" + String.valueOf(id) + ")");
		} catch (URISyntaxException e) {
			throw new ODataRuntimeException("Unable to create id for entity: " + entitySetName, e);
		}
	}


}

[/file]
[/template]

[template public addWhere (entitySet : ODEntitySet) ]
if(EdmProvider.ES_[entitySet.name.toUpper()/]_NAME.equals(startEntitySet.getName())){
			query.addConditions(DSL.field("[entitySet.entityType.name.toLower()/].[entitySet.entityType.key->first().property.name.toLower()/]").eq(keyPredicates.get(0).getText()));
			}
[/template]



[template public addJoin (navigationPropertybinding : ODNavigationPropertyBinding, entitySet : ODEntitySet, schema: ODSchema) {navigationProperty: ODNavigationProperty = navigationPropertybinding.getNavigationPropertyFromNavigationBinding(navigationPropertybinding, entitySet);}]
[if(navigationProperty.multivalued.oclIsUndefined() or (navigationProperty.multivalued = false))]
query.addJoin(DSL.table("[entitySet.entityType.name.toLower()/]"), DSL.field("[navigationProperty.type.name.toLower().concat('.').concat(navigationProperty.type.oclAsType(ODEntityType).key->first().property.name.toLower())/]").eq(DSL.field("[entitySet.entityType.name.toLower()/].[navigationProperty.type.name.toLower()/]_id")));
[/if]
[if((navigationProperty.multivalued = true) and (navigationProperty.partner.multivalued.oclIsUndefined() or navigationProperty.partner.multivalued = false) )]
query.addJoin(DSL.table("[entitySet.entityType.name.toLower()/]"), DSL.field("[entitySet.entityType.name.toLower().concat('.').concat(entitySet.entityType.key->first().property.name.toLower())/]").eq(DSL.field("[navigationProperty.type.name.toLower()/].[entitySet.entityType.name.toLower()/]_id")));
[/if]
[/template]
