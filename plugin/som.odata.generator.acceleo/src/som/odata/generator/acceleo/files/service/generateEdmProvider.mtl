[comment encoding = UTF-8 /]
[module generateEdmProvider('http://odata.org/edm/1.0.0')]


[template public generateEdmProvider(anODService : ODService) {schema :ODSchema = anODService.schemas->first();} ]
[file ('src/main/java/odata/demo/service/EdmProvider.java', false, 'UTF-8')]
package odata.demo.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;
import org.apache.olingo.commons.api.edm.FullQualifiedName;
import org.apache.olingo.commons.api.edm.provider.CsdlAbstractEdmProvider;
import org.apache.olingo.commons.api.edm.provider.CsdlEntityContainer;
import org.apache.olingo.commons.api.edm.provider.CsdlEntityContainerInfo;
import org.apache.olingo.commons.api.edm.provider.CsdlEntitySet;
import org.apache.olingo.commons.api.edm.provider.CsdlEntityType;
import org.apache.olingo.commons.api.edm.provider.CsdlComplexType;
import org.apache.olingo.commons.api.edm.provider.CsdlNavigationPropertyBinding;
import org.apache.olingo.commons.api.edm.provider.CsdlNavigationProperty;
import org.apache.olingo.commons.api.edm.provider.CsdlComplexType;
import org.apache.olingo.commons.api.edm.provider.CsdlProperty;
import org.apache.olingo.commons.api.edm.provider.CsdlPropertyRef;
import org.apache.olingo.commons.api.edm.provider.CsdlSchema;

public class EdmProvider extends CsdlAbstractEdmProvider {

  // Service Namespace
  public static final String NAMESPACE = "[schema.namespace/]";

  public static final String CONTAINER_NAME = "[schema.entityContainer.name/]";
  public static final FullQualifiedName CONTAINER = new FullQualifiedName(NAMESPACE,CONTAINER_NAME);

[for (entityType : ODEntityType | schema.entityTypes)]
  public static final String ET_[entityType.name.toUpper()/]_NAME = "[entityType.name/]";
  public static final FullQualifiedName ET_[entityType.name.toUpper()/]_FQN = new FullQualifiedName(NAMESPACE, ET_[entityType.name.toUpper()/]_NAME);
[/for]
[for (complexType : ODComplexType | schema.complexTypes)]
  public static final String CT_[complexType.name.toUpper()/]_NAME = "[complexType.name/]";
  public static final FullQualifiedName CT_[complexType.name.toUpper()/]_FQN = new FullQualifiedName(NAMESPACE, CT_[complexType.name.toUpper()/]_NAME);
[/for]
[for (entitySet : ODEntitySet | schema.entityContainer.entitySets)]
  public static final String ES_[entitySet.name.toUpper()/]_NAME = "[entitySet.name/]";
[/for]

  @Override
  public List<CsdlSchema> getSchemas() {


    CsdlSchema schema = new CsdlSchema();
    schema.setNamespace(NAMESPACE);

    List<CsdlEntityType> entityTypes = new ArrayList<CsdlEntityType>();
[for (entityType : ODEntityType | schema.entityTypes)]
    entityTypes.add(getEntityType(ET_[entityType.name.toUpper()/]_FQN));
[/for]
[if(not  schema.complexTypes -> isEmpty())]
	List<CsdlComplexType> complexTypes = new ArrayList<CsdlComplexType>();
[for (complexType : ODComplexType | schema.complexTypes)]
    complexTypes.add(getComplexType(CT_[complexType.name.toUpper()/]_FQN));
[/for]
 	schema.setComplexTypes(complexTypes);
[/if]

    schema.setEntityTypes(entityTypes);

    schema.setEntityContainer(getEntityContainer());

    List<CsdlSchema> schemas = new ArrayList<CsdlSchema>();
    schemas.add(schema);

    return schemas;
  }

[if(not schema.complexTypes -> isEmpty())]
@Override
  public CsdlComplexType getComplexType(FullQualifiedName complexTypeName) {

[for (complexType : ODComplexType | schema.complexTypes)]
    if(complexTypeName.equals(CT_[complexType.name.toUpper()/]_FQN)){

[for (property : ODProperty | complexType.properties)]
	CsdlProperty [property.name.toLower()/] = new CsdlProperty().setName("[property.name/]").setType([property.generateJavaType()/])[if(property.multivalued=true)].setCollection(true)[/if];
[/for]
    
      CsdlComplexType complexType = new CsdlComplexType();
      complexType.setName(CT_[complexType.name.toUpper()/]_NAME);
      complexType.setProperties(Arrays.asList([for (property: ODProperty | complexType.properties) separator(',')][property.name.toLower()/][/for]));

      return complexType;
    }
[/for]

    return null;
  }
[/if]
  @Override
  public CsdlEntityType getEntityType(FullQualifiedName entityTypeName) {

[for (entityType : ODEntityType | schema.entityTypes)]
    if(entityTypeName.equals(ET_[entityType.name.toUpper()/]_FQN)){

[for (property : ODProperty | entityType.properties)]
	CsdlProperty [property.name.toLower()/] = new CsdlProperty().setName("[property.name/]").setType([property.generateJavaType()/])[if(property.multivalued=true)].setCollection(true)[/if];
[/for]
[for (navigationProperty : ODNavigationProperty | entityType.navigationProperties)]
      CsdlNavigationProperty [navigationProperty.name.toLower()/] = new CsdlNavigationProperty().setName("[navigationProperty.name/]")
          .setType(ET_[navigationProperty.type.name.toUpper()/]_FQN)[if(navigationProperty.multivalued=true)].setCollection(true)[/if][if(not navigationProperty.partner.oclIsUndefined())].setPartner("[navigationProperty.partner.name/]")[/if];
 [/for]     

    
[for (propertyKeyRef : ODPropertyKeyRef | entityType.key)]
	 CsdlPropertyRef propertyRef = new CsdlPropertyRef();
      propertyRef.setName("[propertyKeyRef.property.name/]");
[/for]      
     

      CsdlEntityType entityType = new CsdlEntityType();
      entityType.setName(ET_[entityType.name.toUpper()/]_NAME);
      entityType.setProperties(Arrays.asList([for (property: ODProperty | entityType.properties) separator(',')][property.name.toLower()/][/for]));
      entityType.setNavigationProperties(Arrays.asList([for (navigationProperty: ODNavigationProperty | entityType.navigationProperties) separator(',')][navigationProperty.name.toLower()/][/for]));
	  entityType.setKey(Collections.singletonList(propertyRef));

      return entityType;
    }
[/for]

    return null;
  }

  @Override
  public CsdlEntitySet getEntitySet(FullQualifiedName entityContainer, String entitySetName) {

    if(entityContainer.equals(CONTAINER)){
[for (entitySet : ODEntitySet| schema.entityContainer.entitySets)]
	 if(entitySetName.equals(ES_[entitySet.name.toUpper()/]_NAME)){
        CsdlEntitySet entitySet = new CsdlEntitySet();
        entitySet.setName(ES_[entitySet.name.toUpper()/]_NAME);
        entitySet.setType(ET_[entitySet.entityType.name.toUpper()/]_FQN);
		
		
[if(not entitySet.navigationPropertyBindings -> isEmpty())]
[for (navigationPropertyBinding : ODNavigationPropertyBinding | entitySet.navigationPropertyBindings)]
		CsdlNavigationPropertyBinding [navigationPropertyBinding.path.toLower()/] = new CsdlNavigationPropertyBinding();
        [navigationPropertyBinding.path.toLower()/].setTarget("[navigationPropertyBinding.target/]"); 
        [navigationPropertyBinding.path.toLower()/].setPath("[navigationPropertyBinding.path/]"); 
       
[/for]
         entitySet.setNavigationPropertyBindings(Arrays.asList([for (navigationPropertyBinding: ODNavigationPropertyBinding |  entitySet.navigationPropertyBindings) separator(',')][navigationPropertyBinding.path.toLower()/][/for]));
[/if]
        return entitySet;
      }
[/for]
     
    }

    return null;
  }

  @Override
  public CsdlEntityContainer getEntityContainer() {

    List<CsdlEntitySet> entitySets = new ArrayList<CsdlEntitySet>();
[for (entitySet : ODEntitySet | schema.entityContainer.entitySets)]
	 entitySets.add(getEntitySet(CONTAINER, ES_[entitySet.name.toUpper()/]_NAME));
[/for]
   
    CsdlEntityContainer entityContainer = new CsdlEntityContainer();
    entityContainer.setName(CONTAINER_NAME);
    entityContainer.setEntitySets(entitySets);

    return entityContainer;
  }

  @Override
  public CsdlEntityContainerInfo getEntityContainerInfo(FullQualifiedName entityContainerName) {

    // This method is invoked when displaying the service document at e.g. http://localhost:8080/DemoService/DemoService.svc
    if(entityContainerName == null || entityContainerName.equals(CONTAINER)){
      CsdlEntityContainerInfo entityContainerInfo = new CsdlEntityContainerInfo();
      entityContainerInfo.setContainerName(CONTAINER);
      return entityContainerInfo;
    }

    return null;
  }
}

[/file]
[/template]

[template public newODPropertyTemplate (property : ODProperty) ]
CsdlProperty [property.name.toLower()/] = new CsdlProperty().setName("[property.name/]").setType([property.generateJavaType()/]);
[/template]

[template public generateJavaType (property : ODProperty) post(trim())]
[if(property.type.oclIsKindOf(ODComplexType))]
CT_[property.type.name.toUpper()/]_FQN
[/if]
[if(property.type.name = 'Edm.Int32')]
EdmPrimitiveTypeKind.Int32.getFullQualifiedName()
[elseif (property.type.name = 'Edm.String')]
EdmPrimitiveTypeKind.String.getFullQualifiedName()
[elseif (property.type.name = 'Edm.Date')]
EdmPrimitiveTypeKind.Date.getFullQualifiedName()
[elseif (property.type.name = 'Edm.Double')]
EdmPrimitiveTypeKind.Double.getFullQualifiedName()
[elseif (property.type.name = 'Edm.Decimal')]
EdmPrimitiveTypeKind.Decimal.getFullQualifiedName()
[/if]
[/template]
