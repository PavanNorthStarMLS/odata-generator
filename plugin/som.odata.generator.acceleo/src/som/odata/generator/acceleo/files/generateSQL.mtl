[comment encoding = UTF-8 /]
[module generateSQL('http://odata.org/edm/1.0.0') /] 


[template public generateSQL(anODService : ODService)]

[comment @main /]
[file ('schema.sql', false, 'UTF-8')]
[for (schema : ODSchema | anODService.schemas)]

# Create tables
	[for (entityType : ODEntityType | schema.entityTypes)]
[entityType.generateTable()/]
	[/for]
[for (complexType : ODComplexType | schema.complexTypes)]
[complexType.generateTable()/]
	[/for]
# Add references
	[for (entityType : ODEntityType | schema.entityTypes)]
		[for (naviagationProperty : ODNavigationProperty | entityType.navigationProperties)]
[naviagationProperty.generateReferences(entityType)/]
		[/for]
		[for (property : ODProperty| entityType.properties)]
[if(property.type.oclIsKindOf(ODComplexType) and (property.multivalued.oclIsUndefined() or property.multivalued = false))]
[property.generateReferences(entityType)/]
[/if]
		[/for]
	[/for]

[/for]
[/file]
[/template]

[template public generateTable (entityType : ODEntityType) ]
CREATE TABLE [entityType.name.toLower()/](
[for (property : ODProperty | entityType.properties)]
	[property.generateColumn()/]
[/for]
[for (naviagationProperty : ODNavigationProperty | entityType.navigationProperties)]
	[naviagationProperty.generateForeignKey()/]
[/for]
	[for (propertyKeyRef : ODPropertyKeyRef | entityType.key) before('PRIMARY KEY (') separator(', ') after(')')][propertyKeyRef.property.name.toLower()/][/for]
);
[/template]
[template public generateTable (complexType : ODComplexType) ]
CREATE TABLE [complexType.name.toLower()/](
	id INT not null,
[for (property : ODProperty | complexType.properties)]
	[property.generateColumn()/]
[/for]
[for (naviagationProperty : ODNavigationProperty | complexType.navigationProperties)]
	[naviagationProperty.generateForeignKey()/]
[/for]
	PRIMARY KEY (id)
);
[/template]
[template public generateColumn (property : ODProperty) ? (property.multivalued.oclIsUndefined() or ( property.multivalued = false)) post(trim()) ]
[if (property.type.oclIsKindOf(ODPrimitiveType))][property.name.toLower()/] [property.type.oclAsType(ODPrimitiveType).genType()/] [if(property.nullable = false)]not null[/if],[elseif] (property.type.oclIsKindOf(ODComplexType))][property.name.toLower()/]_id INT,[/if]

[/template]
[template public generateForeignKey (navigationProperty : ODNavigationProperty) ? (navigationProperty.multivalued.oclIsUndefined() or ( navigationProperty.multivalued = false))]
[navigationProperty.name.toLower().concat('_id') /] [navigationProperty.type.oclAsType(ODEntityType).getTypeOfId()/],
[/template]
[template public getTypeOfId(entityType: ODEntityType) ? (entityType.key->size() <= 1) post(trim())]
[for (ropertyKeyRef : ODPropertyKeyRef | entityType.key)]
	[ropertyKeyRef.property.type.oclAsType(ODPrimitiveType).genType()/]
[/for]
[/template]
[template public getId(entityType: ODEntityType) ? (entityType.key->size() <= 1) post(trim())]
[for (ropertyKeyRef : ODPropertyKeyRef | entityType.key)]
	[ropertyKeyRef.property.name/]
[/for]
[/template]
[template public genType(t : ODPrimitiveType) post(trim())]
[if (t.name = 'Edm.Binary')]BIT
[elseif (t.name = 'Edm.Boolean')] TINYINT(1)
[elseif (t.name = 'Edm.Byte')]TINYINT
[elseif (t.name = 'Edm.Date')] DATE
[elseif (t.name = 'Edm.DateTimeOffset')] DATETIME
[elseif (t.name = 'Edm.Decimal')] DECIMAL
[elseif (t.name = 'Edm.Double')] DOUBLE
[elseif (t.name = 'Edm.Guid')] INT
[elseif (t.name = 'Edm.Int16')] INT
[elseif (t.name = 'Edm.Int32')] INT
[elseif (t.name = 'Edm.Int64')] BIGINT
[elseif (t.name = 'Edm.SByte')] TINYINT
[elseif (t.name = 'Edm.String')] VARCHAR(255)
[elseif (t.name = 'Edm.TimeOfDay')] TIME
[else]UNSUPPORTED[/if][/template]
[template public generateReferences(navigationProperty : ODNavigationProperty, type: ODType) ? (navigationProperty.multivalued.oclIsUndefined() or ( navigationProperty.multivalued = false))]
ALTER TABLE [type.name.toLower()/]
ADD FOREIGN KEY ([navigationProperty.name.toLower().concat('_id')/]) REFERENCES [navigationProperty.type.name.toLower()/]([navigationProperty.type.oclAsType(ODEntityType).getId().toLower()/]);
[/template]
[template public generateReferences(property : ODProperty, entityType : ODEntityType)]
ALTER TABLE [entityType.name.toLower()/]
ADD FOREIGN KEY ([property.name.toLower().concat('_id')/]) REFERENCES [property.type.name.toLower()/](id);
[/template]